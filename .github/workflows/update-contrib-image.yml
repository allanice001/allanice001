name: Update contribution image in README

on:
  schedule:
    - cron: "13 08 * * *" # daily at ~08:13 UTC
  workflow_dispatch:

permissions:
  contents: write

jobs:
  render-graphql:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20.1.0

      - name: Generate SVG from GitHub GraphQL (includes private if your token can see them)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # default repo token; replace with PAT if you need wider access
          USERNAME: ${{ github.repository_owner }}
        run: |
          cat > script.mjs << 'EOF'
          import fs from 'node:fs/promises';

          const query = `
          query($login:String!) {
            user(login:$login) {
              contributionsCollection {
                contributionCalendar {
                  totalContributions
                  weeks {
                    contributionDays { color contributionCount date }
                  }
                }
              }
            }
          }`;

          const resp = await fetch('https://api.github.com/graphql', {
            method: 'POST',
            headers: {
              'Authorization': `bearer ${process.env.GH_TOKEN}`,
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ query, variables: { login: process.env.USERNAME }})
          });

          if (!resp.ok) {
            const text = await resp.text();
            throw new Error(`GraphQL HTTP ${resp.status}: ${text}`);
          }

          const json = await resp.json();
          if (json.errors) throw new Error(JSON.stringify(json.errors, null, 2));

          const weeks = json.data.user.contributionsCollection.contributionCalendar.weeks;

          // --- SVG layout (simple GitHub-like heatmap) ---
          const CELL = 11, GAP = 2; // px
          const cols = weeks.length, rows = 7;
          const width = cols * (CELL + GAP) + GAP;
          const height = rows * (CELL + GAP) + GAP;

          const rects = [];
          weeks.forEach((w, x) => {
            w.contributionDays.forEach((d, y) => {
              const cx = GAP + x * (CELL + GAP);
              const cy = GAP + y * (CELL + GAP);
              // GitHub provides a color per day; fallback to GitHub's empty color
              const color = d.color || '#ebedf0';
              rects.push(
                `<rect x="${cx}" y="${cy}" width="${CELL}" height="${CELL}" rx="2" ry="2" fill="${color}">` +
                `<title>${d.date}: ${d.contributionCount} contributions</title>` +
                `</rect>`
              );
            });
          });

          const svg = `
          <svg xmlns="http://www.w3.org/2000/svg" width="${width}" height="${height}" viewBox="0 0 ${width} ${height}">
            <rect width="100%" height="100%" fill="transparent"/>
            ${rects.join('\n')}
          </svg>`.trim();

          await fs.writeFile('contrib.svg', svg, 'utf8');
          EOF

          node script.mjs

      - name: Ensure contrib markers exist, then inject the image
        run: |
          set -euo pipefail
          START="<!--START_SECTION:contrib-image-->"
          END="<!--END_SECTION:contrib-image-->"
          TS="$(date -u +%Y%m%d%H%M%S)"

          if [ ! -f README.md ]; then
            touch README.md
          fi

          if ! grep -q "$START" README.md; then
            {
              echo ""
              echo "### üó∫Ô∏è Contributions"
              echo ""
              echo "$START"
              echo "<!-- The action will replace this line with the generated image -->"
              echo "$END"
              echo ""
            } >> README.md
          fi

          NEW_CONTENT="${START}\n<img src=\"contrib.svg?ts=${TS}\" alt=\"Contributions\" />\n${END}"

          awk -v start="$START" -v end=
